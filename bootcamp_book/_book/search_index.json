[["index.html", "Coding Bootcamp for the starting biologist or cognitive scientist Chapter 1 Getting Started 1.1 Installation of software 1.2 Usage 1.3 Render book 1.4 Preview book", " Coding Bootcamp for the starting biologist or cognitive scientist Samuel Gurr, PhD and Jason Griffin, PhD 2024-03-05 Chapter 1 Getting Started 1.1 Installation of software 1.1.1 The ecosystem With R and RStudio now installed on your computer, lets open Rstudio. It may be overwhelming at first, but this Integrated Development Environment (IDE) will provide a useful and practical interface between you and your code. Lets explore the basics of this interface. 1. Script Window 2. Console 3. Environment 4. Directory This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 1.2 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 1.3 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select “All formats” if you’d like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, you’ll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 1.4 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console: bookdown::serve_book() "],["hello-bookdown.html", "Chapter 2 Hello bookdown 2.1 A section", " Chapter 2 Hello bookdown All chapters start with a first-level heading followed by your chapter title, like the line above. There should be only one first-level heading (#) per .Rmd file. 2.1 A section All chapter sections start with a second-level (##) or higher heading followed by your section title, like the sections above and below here. You can have as many as you want within a chapter. An unnumbered section Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the shorter {-} at the end of the heading, like in this section. "],["cross.html", "Chapter 3 Cross-references 3.1 Chapters and sub-chapters 3.2 Captioned figures and tables", " Chapter 3 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 3.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 3. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 3.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 3.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 3.1: Here is a nice figure! Don’t miss Table 3.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 3.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2024) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["for.-loop.-fun..html", "Chapter 8 For. Loop. Fun. 8.1 Using a mock dataset ‘ToothGrowth’{-} 8.2 Before getting started..{-} 8.3 Add base commands to your tool belt! 8.4 Loops, what are they good for? .. absolutely somethin’!{-} 8.5 Exercise 8.6 Example #1 (custom column): Next time floss the pigs{-} 8.7 Example #2 (plot loop): Flower power{-} 8.8 Activity! For, if, else, case_when, Oh My!", " Chapter 8 For. Loop. Fun. Objective learn base commands to call key components of your data (nrow, ncol, $, [,],c(), etc.) use base syntax to explore the logic behind forloops 8.1 Using a mock dataset ‘ToothGrowth’{-} 8.1.1 Mock data in baseR{-} R has plenty of dataframes and matrices to play with, take a look below! data() # wow! these are all mock datasets in base R! ToothGrowth contains data on the effects of vitamin C on tooth growth in 60 Guinea pigs. Each animal received one of three dose levels of vitamin C (0.5, 1, and 2 mg/day) by one of two delivery methods, orange juice or ascorbic acid (vitamin C as VC). 8.2 Before getting started..{-} Lets assign DF_tooth as our working version of ToothGrowth in our exercises DF_tooth &lt;- ToothGrowth # lets call it something else 8.3 Add base commands to your tool belt! Explore the data a bit - while we’re at it walk through some core commands head - shows you the first rows of your dataframe head(DF_tooth) # head shows your the first rows of the dataframe ## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10.0 VC 0.5 head(DF_tooth, 2) # tell it how many rows you want to see ## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 tail - shows you the last rows of your dataframe tail(DF_tooth) # tail shows you the last rows of the dataframe ## len supp dose ## 55 24.8 OJ 2 ## 56 30.9 OJ 2 ## 57 26.4 OJ 2 ## 58 27.3 OJ 2 ## 59 29.4 OJ 2 ## 60 23.0 OJ 2 tail(DF_tooth, 1) # tell it how many rows you want to see ## len supp dose ## 60 23 OJ 2 nrow - count the number of rows nrow(DF_tooth) # prints a single integer for your object ## [1] 60 ncol - count the number of columns ncol(DF_tooth) # prints a single integer for your object ## [1] 3 dim - dimensions of your object dim(DF_tooth) # 60 rows and 3 columns! ## [1] 60 3 [,] - use brackets to call the “x and y” coordinates of your object, being your [row, column] tail(DF_tooth, 1) # look at the last row again, we see the row number is 60 and there are three columns ## len supp dose ## 60 23 OJ 2 # last row is 60 and the first column is len - below == 23! DF_tooth[60,1] # 23 ## [1] 23 # last row is 60 and the second column is supp DF_tooth[60,2] # &#39;OJ&#39; ## [1] OJ ## Levels: OJ VC # last row is 60 and the third column is dose DF_tooth[60,3] # 2 ## [1] 2 c() - concatenate, used to extract rows and columns or list values! c(1:5) # with integers! ## [1] 1 2 3 4 5 c(&#39;one&#39;, &#39;of&#39;, &#39;me&#39;, &#39;is&#39;, &#39;order&#39;, &#39;out&#39;, &#39;of&#39;) # with strings! ## [1] &quot;one&quot; &quot;of&quot; &quot;me&quot; &quot;is&quot; &quot;order&quot; &quot;out&quot; &quot;of&quot; Activity: Print the first five rows of the ‘len’ column in DF_tooth use the commands above to solve head(DF_tooth) # we just want to print `4.2, 11.5, 7.3, 5.8, 6.4` ## len supp dose ## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10.0 VC 0.5 # try it below! 8.4 Loops, what are they good for? .. absolutely somethin’!{-} About for-loops iterate over a collection of objects, such as a vector, a list, a matrix, or a dataframe, and apply the same set of operations on each item of a given data structure. Why join the for-ce? keep your code clean, remove unnecessary repetitive code blocks streamline you QC, statistics, sanity checks, and more! honest data carpentry - start with raw data to form something new &amp; reproducible! create new columns based on unique criteria comment as you go, keep a bread crumb trail from old to new data files (my opinion) keeps coding logic fresh! How to do it for to open your for loop () set your identifier and call collection of objects {} open and close - write what you want to apply to each object! for ( in ) { apply what is written here to each object } close the loop 8.5 Exercise 8.6 Example #1 (custom column): Next time floss the pigs{-} Turns out the students fed the Guinea pigs orange juice (supp = ‘OJ’) with extra pulp! It was on sale at Aldi and they couldn’t beat the bargin. Unfortunately, OJ accumulated on the teeth and artificially inflated length measurements by 10%. Let’s use a for loop to make a new len column len_new for to open your for loop () set your identifier and call collection of objects (i in 1:nrow(DF_tooth)) - our collection of objects are row-wise, meaning that the for loop with iterate commands for each row i of DF_tooth {} - inserted below is an if else conditional statement to call row-wise boolean value before either calculating the new value when supplemented OJ or simply outputting the same length value when supplemented vitamin C. for (i in 1:nrow(DF_tooth)) { # open for loop, for i equal to 1:60 # do the following for when i is equal to 1, 2, 3, ..60 # this is one possible solution using a if else conditional statement! if (DF_tooth[i,2] == &#39;OJ&#39;) { # if row i in the second column == &#39;OJ&#39; DF_tooth$len_new[i] &lt;- DF_tooth[i,1] + DF_tooth[i,1]*(0.1) # new row &#39;len_new&#39; calculated } else { # FALSE, second column == &#39;VC&#39; DF_tooth$len_new[i] &lt;- DF_tooth[i,1] # &#39;len_new&#39; row is the same as len } # end if statment } # close for loop View(DF_tooth) # look at the data! Note Now that you have the skill to code your conditional statements, here is an example of an R package that streamlines raw syntax and logic for you - in other words.. there’s an app package for that! {-} dplyr has a nifty one liner that does the exact purpose as the for loop above! input a conditional statement and the output if TRUE or FALSE using the command if_else if_else(condition, TRUE, FALSE) library(dplyr) # load the library ## Warning: package &#39;dplyr&#39; was built under R version 4.2.3 ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union # install.packages(&#39;dplyr&#39;) # of you do not have the package above, remove the hashtag and Cnrtl+Enter to run this line tp install ?if_else # review the command page # input the criteria - same as the for loop above DF_tooth$len_new2 &lt;- if_else(DF_tooth$supp == &#39;OJ&#39;, (DF_tooth$len + DF_tooth$len*(0.1)), # TRUE (DF_tooth$len)) # FALSE View(DF_tooth) 8.7 Example #2 (plot loop): Flower power{-} Looping through data columns is an efficient method to plot large data sets, especially if you have custom plotting code! Below is a simple example outputing plots. for to open your for loop () set your identifier and call collection of objects (i in 1:(ncol(iris)-1)) - our collection of objects are column-wise, the for loop will iterate commands for each column i of iris except for the last column {} - inserted below is an ggplot geom_boxplot for each column with numeric data library(ggplot2) # load the library ## Warning: package &#39;ggplot2&#39; was built under R version 4.2.3 # install.packages(&#39;ggplot2&#39;) # of you do not have the package above, remove the hashtag and Cnrtl+Enter to run this line tp install iris # take a look at the dataset! ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5.0 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3.0 1.4 0.1 setosa ## 14 4.3 3.0 1.1 0.1 setosa ## 15 5.8 4.0 1.2 0.2 setosa ## 16 5.7 4.4 1.5 0.4 setosa ## 17 5.4 3.9 1.3 0.4 setosa ## 18 5.1 3.5 1.4 0.3 setosa ## 19 5.7 3.8 1.7 0.3 setosa ## 20 5.1 3.8 1.5 0.3 setosa ## 21 5.4 3.4 1.7 0.2 setosa ## 22 5.1 3.7 1.5 0.4 setosa ## 23 4.6 3.6 1.0 0.2 setosa ## 24 5.1 3.3 1.7 0.5 setosa ## 25 4.8 3.4 1.9 0.2 setosa ## 26 5.0 3.0 1.6 0.2 setosa ## 27 5.0 3.4 1.6 0.4 setosa ## 28 5.2 3.5 1.5 0.2 setosa ## 29 5.2 3.4 1.4 0.2 setosa ## 30 4.7 3.2 1.6 0.2 setosa ## 31 4.8 3.1 1.6 0.2 setosa ## 32 5.4 3.4 1.5 0.4 setosa ## 33 5.2 4.1 1.5 0.1 setosa ## 34 5.5 4.2 1.4 0.2 setosa ## 35 4.9 3.1 1.5 0.2 setosa ## 36 5.0 3.2 1.2 0.2 setosa ## 37 5.5 3.5 1.3 0.2 setosa ## 38 4.9 3.6 1.4 0.1 setosa ## 39 4.4 3.0 1.3 0.2 setosa ## 40 5.1 3.4 1.5 0.2 setosa ## 41 5.0 3.5 1.3 0.3 setosa ## 42 4.5 2.3 1.3 0.3 setosa ## 43 4.4 3.2 1.3 0.2 setosa ## 44 5.0 3.5 1.6 0.6 setosa ## 45 5.1 3.8 1.9 0.4 setosa ## 46 4.8 3.0 1.4 0.3 setosa ## 47 5.1 3.8 1.6 0.2 setosa ## 48 4.6 3.2 1.4 0.2 setosa ## 49 5.3 3.7 1.5 0.2 setosa ## 50 5.0 3.3 1.4 0.2 setosa ## 51 7.0 3.2 4.7 1.4 versicolor ## 52 6.4 3.2 4.5 1.5 versicolor ## 53 6.9 3.1 4.9 1.5 versicolor ## 54 5.5 2.3 4.0 1.3 versicolor ## 55 6.5 2.8 4.6 1.5 versicolor ## 56 5.7 2.8 4.5 1.3 versicolor ## 57 6.3 3.3 4.7 1.6 versicolor ## 58 4.9 2.4 3.3 1.0 versicolor ## 59 6.6 2.9 4.6 1.3 versicolor ## 60 5.2 2.7 3.9 1.4 versicolor ## 61 5.0 2.0 3.5 1.0 versicolor ## 62 5.9 3.0 4.2 1.5 versicolor ## 63 6.0 2.2 4.0 1.0 versicolor ## 64 6.1 2.9 4.7 1.4 versicolor ## 65 5.6 2.9 3.6 1.3 versicolor ## 66 6.7 3.1 4.4 1.4 versicolor ## 67 5.6 3.0 4.5 1.5 versicolor ## 68 5.8 2.7 4.1 1.0 versicolor ## 69 6.2 2.2 4.5 1.5 versicolor ## 70 5.6 2.5 3.9 1.1 versicolor ## 71 5.9 3.2 4.8 1.8 versicolor ## 72 6.1 2.8 4.0 1.3 versicolor ## 73 6.3 2.5 4.9 1.5 versicolor ## 74 6.1 2.8 4.7 1.2 versicolor ## 75 6.4 2.9 4.3 1.3 versicolor ## 76 6.6 3.0 4.4 1.4 versicolor ## 77 6.8 2.8 4.8 1.4 versicolor ## 78 6.7 3.0 5.0 1.7 versicolor ## 79 6.0 2.9 4.5 1.5 versicolor ## 80 5.7 2.6 3.5 1.0 versicolor ## 81 5.5 2.4 3.8 1.1 versicolor ## 82 5.5 2.4 3.7 1.0 versicolor ## 83 5.8 2.7 3.9 1.2 versicolor ## 84 6.0 2.7 5.1 1.6 versicolor ## 85 5.4 3.0 4.5 1.5 versicolor ## 86 6.0 3.4 4.5 1.6 versicolor ## 87 6.7 3.1 4.7 1.5 versicolor ## 88 6.3 2.3 4.4 1.3 versicolor ## 89 5.6 3.0 4.1 1.3 versicolor ## 90 5.5 2.5 4.0 1.3 versicolor ## 91 5.5 2.6 4.4 1.2 versicolor ## 92 6.1 3.0 4.6 1.4 versicolor ## 93 5.8 2.6 4.0 1.2 versicolor ## 94 5.0 2.3 3.3 1.0 versicolor ## 95 5.6 2.7 4.2 1.3 versicolor ## 96 5.7 3.0 4.2 1.2 versicolor ## 97 5.7 2.9 4.2 1.3 versicolor ## 98 6.2 2.9 4.3 1.3 versicolor ## 99 5.1 2.5 3.0 1.1 versicolor ## 100 5.7 2.8 4.1 1.3 versicolor ## 101 6.3 3.3 6.0 2.5 virginica ## 102 5.8 2.7 5.1 1.9 virginica ## 103 7.1 3.0 5.9 2.1 virginica ## 104 6.3 2.9 5.6 1.8 virginica ## 105 6.5 3.0 5.8 2.2 virginica ## 106 7.6 3.0 6.6 2.1 virginica ## 107 4.9 2.5 4.5 1.7 virginica ## 108 7.3 2.9 6.3 1.8 virginica ## 109 6.7 2.5 5.8 1.8 virginica ## 110 7.2 3.6 6.1 2.5 virginica ## 111 6.5 3.2 5.1 2.0 virginica ## 112 6.4 2.7 5.3 1.9 virginica ## 113 6.8 3.0 5.5 2.1 virginica ## 114 5.7 2.5 5.0 2.0 virginica ## 115 5.8 2.8 5.1 2.4 virginica ## 116 6.4 3.2 5.3 2.3 virginica ## 117 6.5 3.0 5.5 1.8 virginica ## 118 7.7 3.8 6.7 2.2 virginica ## 119 7.7 2.6 6.9 2.3 virginica ## 120 6.0 2.2 5.0 1.5 virginica ## 121 6.9 3.2 5.7 2.3 virginica ## 122 5.6 2.8 4.9 2.0 virginica ## 123 7.7 2.8 6.7 2.0 virginica ## 124 6.3 2.7 4.9 1.8 virginica ## 125 6.7 3.3 5.7 2.1 virginica ## 126 7.2 3.2 6.0 1.8 virginica ## 127 6.2 2.8 4.8 1.8 virginica ## 128 6.1 3.0 4.9 1.8 virginica ## 129 6.4 2.8 5.6 2.1 virginica ## 130 7.2 3.0 5.8 1.6 virginica ## 131 7.4 2.8 6.1 1.9 virginica ## 132 7.9 3.8 6.4 2.0 virginica ## 133 6.4 2.8 5.6 2.2 virginica ## 134 6.3 2.8 5.1 1.5 virginica ## 135 6.1 2.6 5.6 1.4 virginica ## 136 7.7 3.0 6.1 2.3 virginica ## 137 6.3 3.4 5.6 2.4 virginica ## 138 6.4 3.1 5.5 1.8 virginica ## 139 6.0 3.0 4.8 1.8 virginica ## 140 6.9 3.1 5.4 2.1 virginica ## 141 6.7 3.1 5.6 2.4 virginica ## 142 6.9 3.1 5.1 2.3 virginica ## 143 5.8 2.7 5.1 1.9 virginica ## 144 6.8 3.2 5.9 2.3 virginica ## 145 6.7 3.3 5.7 2.5 virginica ## 146 6.7 3.0 5.2 2.3 virginica ## 147 6.3 2.5 5.0 1.9 virginica ## 148 6.5 3.0 5.2 2.0 virginica ## 149 6.2 3.4 5.4 2.3 virginica ## 150 5.9 3.0 5.1 1.8 virginica dim(iris) # 150 rows and 5 columns ## [1] 150 5 head(iris) # first four rows are numeric data and last row is categorical &#39;Species&#39; ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # below we loop thorugh each iris numeric column and plot by species for (i in 1:(ncol(iris)-1)) { # open for loop, for i equal to 1 - 4 loop_measurement_name &lt;- colnames(iris[i]) # string to name the plot and y axis plot &lt;- ggplot(data = iris, aes(x=Species, y=iris[,i]), fill=Species) + geom_boxplot() + geom_jitter() + ylab(loop_measurement_name) + # name the y axis w ggtitle(loop_measurement_name) + # name the plot theme_classic() print(plot) } # close for loop # clock below to see the four unique boxplots! Note: as opposed to print() we could use the unique identifier ‘loop_measurement_name’ to name and output pdfs or jpegs onto your computer! 8.8 Activity! For, if, else, case_when, Oh My! About: Tackle the puzzle below using (1) raw base R syntax using for with if and else conditional statements and (2) the dplyr alternative A greenhouse experiment was originally planned to breed hybrid strains from each of the three iris species. However, the off-brand fertilizer you used caused each species to grow a trait unknown to iris ..ologists!! Paying homage to the man-eating plant from Little Shop of Horrors, you name this discovery Audrey_III. The allometric relationship of Audrey_III.Length with Pedal.Length is different for each species setosa - Audrey_III.Length= Pedal.Length^2.4 versicolor: Audrey_III.Length= Pedal.Length^4.0 virginica: Audrey_III.Length= Pedal.Length^3.0 Objective: create a new column Audrey_III.Length based on the relationships with Pedal.Length for each iris species # # for () { # open for loop # # # if () { # condition # # # if TRUE # # # ) else if () { # next condition # # # if TRUE for else if only # # } else { # # # if FALSE for all conditions # # } # end if statment # # # } # close for loop # View(iris) # look at the data! ?case_when iris$Audrey_III.Length_NOloop &lt;- # use case_when to take it! View(iris) # when you finish, compare your Audrey_III results "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
